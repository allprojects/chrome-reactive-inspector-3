// Generated by LiveScript 1.5.0
//(function(){
    var isArray, fromTarget, fromKey, fromKeyDown, fromKeyUp, fromKeyPress, ctrlKey, altKey, shiftKey, clickItem, slice$ = [].slice;
    Bacon.Observable.prototype.mapJqueryTarget = function(){
        var this$ = this;
        return this.map(function(it){
            return it.currentTarget;
        }).map($);
    };
    isArray = function(xs){
        return xs instanceof Array;
    };
    fromTarget = Bacon.fromEventTarget;
    fromKey = function(codes, type){
        var this$ = this;
        if (!isArray(codes)) {
            codes = [codes];
        }
        return fromTarget(document.body, type).filter(function(it){
            return in$(it.keyCode, codes);
        });
    };
    fromKeyDown = partialize$.apply(this, [fromKey, [void 8, 'keydown'], [0]]);
    fromKeyUp = partialize$.apply(this, [fromKey, [void 8, 'keyup'], [0]]);
    fromKeyPress = function(code){
        return Bacon.mergeAll(fromKeyDown(code).map(true), fromKeyUp(code).map(false)).skipDuplicates().toProperty(false);
    };
    ctrlKey = fromKeyPress([17, 19]);
    altKey = fromKeyPress(18);
    shiftKey = fromKeyPress(16);
    clickItem = $(document.body).asEventStream('click', '.elem');
    clickItem.filter(ctrlKey.or(shiftKey).not()).mapJqueryTarget().assign(function(it){
        $(".elem").removeClass('active');
        return it.addClass('active');
    });
    clickItem.filter(ctrlKey).mapJqueryTarget().assign(function(it){
        return it.toggleClass('active');
    });
    clickItem.filter(shiftKey.not()).combine(clickItem.filter(shiftKey), function(a, b){
        return [a, b];
    }).filter(function(arg$){
        var a, b;
        a = arg$[0], b = arg$[1];
        return a.timeStamp < b.timeStamp;
    }).map(function(arg$){
        var a, b;
        a = arg$[0], b = arg$[1];
        return [$(a.currentTarget), $(b.currentTarget)];
    }).assign(function(arg$){
        var a, b, ai, bi, elems;
        a = arg$[0], b = arg$[1];
        ai = a.index();
        bi = b.index();
        if (ai < bi) {
            elems = $(".elem").slice(ai, bi + 1);
        } else {
            elems = $(".elem").slice(bi, ai + 1);
        }
        return elems.addClass('active');
    });
    function in$(x, xs) {
        var i = -1, l = xs.length >>> 0;
        while (++i < l) {
            /*if (window.CP.shouldStopExecution(1)) {
                break;
            }*/
            if (x === xs[i]) return true;
            //window.CP.exitedLoop(1);
        }
        return false;
    }
    function partialize$(f, args, where){
        var context = this;
        return function(){
            var params = slice$.call(arguments), i,
                len = params.length, wlen = where.length,
                ta = args ? args.concat() : [], tw = where ? where.concat() : [];
            for (i = 0; i < len; ++i) {

                ta[tw[0]] = params[i];
                tw.shift();
            }
            //window.CP.exitedLoop(2);

            return len < wlen && len ?
                partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
        };
    }
//}).call(this);
